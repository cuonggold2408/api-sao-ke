// Make sure to include these imports:
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs"); // Import fs to handle file system operations
const path = require("path");

// Initialize GoogleGenerativeAI with the API key
const genAI = new GoogleGenerativeAI(
  process.env.API_KEY || "AIzaSyAFDyshkjuRtGoQ5OmJWgxq3Oe1bupPcHI"
);

// Get the generative model
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-exp-0801" });

// Function to convert file to generative part
// function urlToGenerativePart(imageUrl, mimeType) {
//   return {
//     externalData: {
//       uri: imageUrl,
//       mimeType,
//     },
//   };
// }
const axios = require("axios");

async function fetchImageFromUrl(imageUrl) {
  const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
  return Buffer.from(response.data, "binary").toString("base64");
}

// async function generateContent({ imageUrl }) {
//   try {
//     const prompt =
//       "H√£y ƒë∆∞a ra 3 th√¥ng tin v·ªõi c·∫•u tr√∫c nh∆∞ sau:{bank: (t√™n ng√¢n h√†ng chuy·ªÉn ƒë·∫øn ho·∫∑c l√† ng√¢n h√†ng th·ª• h∆∞·ªüng h√£y vi·∫øt t·∫Øt: BIDV, VCB, Agri, Vietin), money: (b·ªè VND), desc: (n·ªôi dung chuy·ªÉn kho·∫£n kh√¥ng ghi d·∫•u)} H√£y ƒë∆∞a ra t·∫•t c·∫£ c√°c k·∫øt qu·∫£ c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t cho t√¥i, cao nh·∫•t ·ªü ƒë·∫ßu ti√™n";

//     // Fetch image data from URL and convert to base64
//     console.log("üöÄ ~ generateContent ~ imageUrl:", imageUrl);
//     const base64Image = await fetchImageFromUrl(imageUrl);

//     // Prepare image part for the request using base64 data
//     const imagePart = {
//       inlineData: {
//         data: base64Image,
//         mimeType: "image/jpeg",
//       },
//     };

//     // Use await inside the async function to generate content
//     const result = await model.generateContent([prompt, imagePart]);

//     // Log the response text
//     console.log(result.response.text());
//     return result.response.text();
//   } catch (error) {
//     console.error("Error generating content:", error);
//   }
// }

function parseToJson(responseText) {
  // N·∫øu `responseText` l√† m·ªôt ƒë·ªëi t∆∞·ª£ng h·ª£p l·ªá, tr·∫£ v·ªÅ n√≥ ngay l·∫≠p t·ª©c
  if (typeof responseText === "object") {
    return responseText;
  }

  // X·ª≠ l√Ω chu·ªói JSON n·∫øu `responseText` l√† chu·ªói
  try {
    // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá c√≥ th·ªÉ c√≥ ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi chu·ªói
    const cleanedResponse = responseText
      .replace(/```json/, "") // Lo·∫°i b·ªè k√Ω t·ª± m·ªü ƒë·∫ßu kh√¥ng h·ª£p l·ªá
      .replace(/```/, "") // Lo·∫°i b·ªè k√Ω t·ª± ƒë√≥ng kh√¥ng h·ª£p l·ªá
      .replace(/([{,]\s*)([a-zA-Z0-9_]+)\s*:/g, '$1"$2":') // ƒê·∫£m b·∫£o t√™n thu·ªôc t√≠nh c√≥ d·∫•u ngo·∫∑c k√©p
      .replace(/:\s*([a-zA-Z0-9_]+)\s*([,}])/g, ':"$1"$2') // ƒê·∫£m b·∫£o gi√° tr·ªã c√≥ d·∫•u ngo·∫∑c k√©p n·∫øu c·∫ßn
      .trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a

    // Parse chu·ªói ƒë√£ l√†m s·∫°ch th√†nh ƒë·ªëi t∆∞·ª£ng JSON
    const parsedObject = JSON.parse(cleanedResponse);
    return parsedObject;
  } catch (error) {
    console.error("Error parsing responseText:", error);
    return {};
  }
}

async function generateContent({ imageUrl }) {
  try {
    const prompt = `H√£y ƒë∆∞a ra 1 k·∫øt qu·∫£ duy nh·∫•t v·ªõi c·∫•u tr√∫c nh∆∞ sau:
      { bank: (t√™n ng√¢n h√†ng chuy·ªÉn ƒë·∫øn ho·∫∑c l√† ng√¢n h√†ng th·ª• h∆∞·ªüng h√£y vi·∫øt t·∫Øt: BIDV, VCB, Agri, Vietin), 
       money: (b·ªè VND, b·ªè d·∫•u ph·∫©y, b·ªè d·∫•u ch·∫•m), 
       desc: (n·ªôi dung chuy·ªÉn kho·∫£n kh√¥ng ghi d·∫•u, ghi tr√™n 1 d√≤ng , gi·ªØ nguy√™n d·∫•u c√°ch v√† x√≥a h·∫øt s·ªë ·ªü cu·ªëi n·∫øu c√≥)
       }.
       ƒê·∫£m b·∫£o r·∫±ng k·∫øt qu·∫£ n√†y c√≥ ƒë·ªô ch√≠nh x√°c cao nh·∫•t, ng√¢n h√†ng v√† s·ªë ti·ªÅn ph·∫£i ch√≠nh x√°c. L∆∞u √Ω t√™n ng√¢n h√†ng vi·∫øt t∆∞∆°ng t·ª± v√≠ d·ª• nh∆∞ ng√¢n h√†ng ngo·∫°i th∆∞∆°ng s·∫Ω l√† vcb, ng√¢n h√†ng c√¥ng th∆∞∆°ng l√† vietin...`;

    // Fetch image data from URL and convert to base64
    const base64Image = await fetchImageFromUrl(imageUrl);

    // Prepare image part for the request using base64 data
    const imagePart = {
      inlineData: {
        data: base64Image,
        mimeType: "image/jpeg",
      },
    };

    // Use await inside the async function to generate content
    const result = await model.generateContent([prompt, imagePart]);

    // Log the response text
    const responseText = result.response.text();
    console.log(responseText);

    // Assuming the API can return multiple results, pick the first one
    const bestResult = Array.isArray(responseText)
      ? responseText[0]
      : responseText;
    const parsedResult = parseToJson(bestResult);
    return parsedResult;
  } catch (error) {
    console.error("Error generating content:", error);
  }
}

module.exports = { generateContent };
